module countones_selen (data,reset,enable,clock,load,Q,count);
input [7:0]data;
input enable,reset,clock,load;
output [7:0]Q;
output [3:0]count;
reg [7:0]Q;
reg [3:0]count;
always @(posedge clock or negedge reset)
begin
 if(!reset)
 begin
 Q=8'b00000000;
 count=4'b0000;
 end
 else if(!enable)
 begin
 Q=8'b00000000;
 count=4'b0000;
 end
 else if(enable==1 && load==1)
 begin
 Q<=data;
 count=4'b0000;
 end
 else
 begin
 Q<=data;
 count=data[0]+data[1]+data[2]+data[3]+data[4]+data[5]+data[6]+data[7];
end
end
endmodule


----------------------PROPER-TESTBENCH---------------
module testbench_selen();
reg reset,enable,clock,load;
reg [7:0]data;
wire [3:0]count;
wire [7:0]Q;
countones_selen DUT(data,reset,enable,clock,load,Q,count);
always
begin
 clock=1; #200; clock=0; #200;
end
always begin
 reset = 0; load = 0; enable = 0; data=8'b01010101; #200;
 reset = 1; load = 1; enable = 1; data=8'b01010101; #200;
 reset = 1; load = 0; enable = 1; data=8'b01010101; #1000;
 reset = 0; load = 0; enable = 0; data=8'b11010111; #200;
 reset = 1; load = 1; enable = 1; data=8'b11010111; #200;
 reset = 1; load = 0; enable = 1; data=8'b11010111; #1000;
 reset = 0; load = 0; enable = 0; data=8'b11000001; #200;
 reset = 1; load = 1; enable = 1; data=8'b11000001; #200;
 reset = 1; load = 0; enable = 1; data=8'b11000001; #1000;
end
endmodule
