--------------DFLIPFLOP---------------
module D_FF(Rst, Load, D, Clk, Q);
input Rst, Load, D, Clk;
output Q;
reg Q;
always @ (posedge Clk or negedge Rst or posedge Load)
begin
if (Rst==0)
Q<= 0;
else if (Load==1)
Q<=D;
end
endmodule
---------------4BITREGISTER-------------
module register(RST,LOAD,D,CLK,SO);
parameter size=4;
input LOAD,CLK, RST, D;
output SO;
genvar i;
wire [4:0] s;
generate
for (i = 0; i < size; i = i + 1) begin: register
if (i == 0)
dflipflop(D, CLK, RST, LOAD, s[0]);
else if (i == size-1)
dflipflop (s[i-1], CLK, RST, LOAD, SO);
 else
dflipflop (SO[i-1], CLK, RST, LOAD, s[i]);
end
endgenerate
endmodule
------------DECODER---------------
module decoder (data_in,data_out);
input [3:0] data_in;
output [6:0] data_out;
reg [6:0] data_out;
always @(data_in)
 case (data_in)
 4'b1000 : data_out=16'b1111110100000001;
 4'b1001 : data_out=16'b1111110100011111;
 4'b1010 : data_out=16'b1111110101000001;
 4'b1011 : data_out=16'b1111110101001001;
 4'b1100 : data_out=16'b1111110110011001;
 4'b1101 : data_out=16'b1111110100001101;
 4'b1110 : data_out=16'b1111110100100101;
 4'b1111 : data_out=16'b1111110110011111;
 4'b0000 : data_out=16'b1111111100000011;
 4'b0001 : data_out=16'b1111111110011111;
 4'b0010 : data_out=16'b1111111100100101;
 4'b0011 : data_out=16'b1111111100001101;
 4'b0100 : data_out=16'b1111111110011001;
 4'b0101 : data_out=16'b1111111101001001;
 4'b0110 : data_out=16'b1111111101000001;
 4'b0111 : data_out=16'b1111111100011111;
 endcase
endmodule
--------------UPDOWNCOUNTER------------
module Wa_updown_counter (CLK, RST, count, select);
input CLK, RST, select;
output reg [3:0] count;
always@(posedge CLK or negedge RST)
begin
if(~RST)
count=0;
else if(select==1)
count=count+1;
else if(select==0)
count=count-1;
end
endmodule
